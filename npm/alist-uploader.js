!function(e){"function"==typeof define&&define.amd?define(e):e()}((function(){"use strict";!function(e){class t{constructor(e){this.baseUrl=e.baseUrl,this.username=e.username,this.password=e.password,this.uploadRootFolder=e.uploadRootFolder,this.createTimestampFolder=e.createTimestampFolder||!1,this.debug=e.debug||!1,this.uploadMethod=e.uploadMethod||"stream",this.concurrency=e.concurrency||1,this.showVersionInfo=void 0===e.showVersionInfo||e.showVersionInfo,this.activeUploads=0,this.currentXhr=null,this.isUploading=!1,this.fileProgress={},this.listeners={progress:[],complete:[],error:[]},this.showVersionInfo&&t.printVersionInfo(),this.debug&&this.printConfigInfo()}static debugLog(e,...t){e&&console.log(...t)}printVersion(){this.showVersionInfo&&t.printVersionInfo()}static printVersionInfo(){console.log("%cAlistUploaderJS v0.1.2","\n                color: white;\n                background: linear-gradient(to right, rgb(120,120,220) 20%, rgb(160,200,240) 80%);\n                padding: 6px;\n                border: 3px solid rgb(160,200,240);\n                border-radius: 6px;\n                display: block;\n            "," - GitHub: https://github.com/4444TENSEI/AlistUploaderJS")}printConfigInfo(){const e={"账号":this.username,"密码":"******","服务地址":this.baseUrl,"上传根目录":this.uploadRootFolder||"未指定","并发上传数量":this.concurrency||1,"创建时间戳文件夹":this.createTimestampFolder||!1,"调试模式":this.debug||!1,"显示版本信息":void 0===this.showVersionInfo||this.showVersionInfo,"上传方式":this.uploadMethod||"stream"};console.log("AlistUploaderJS配置信息载入成功：",e)}on(e,t){this.listeners[e]&&this.listeners[e].push(t)}off(e,t){this.listeners[e]&&(this.listeners[e]=this.listeners[e].filter((e=>e!==t)))}trigger(e,...t){this.listeners[e]&&this.listeners[e].forEach((e=>e(...t)))}abortUpload(){this.currentXhr?(this.currentXhr.abort(),this.currentXhr=null,this.isUploading=!1,t.debugLog(this.debug,"取消上传。")):console.log("当前没有正在上传的任务。")}uploadProgressListener(e,t,s){if(t.lengthComputable&&e){const e=Date.now(),o=t.loaded,r=t.total,i=o/r*100,n=s.size<1048576?`${(s.size/1024).toFixed(2)} KB`:`${(s.size/1048576).toFixed(2)} MB`;this.fileProgress[s.name]=this.fileProgress[s.name]||{startTime:e,lastLoaded:0,movingAverageSpeed:0,progress:0,fileSize:n};const a=this.fileProgress[s.name],d=(e-a.lastTime)/1e3,l=(o-a.lastLoaded)/(d||1);a.movingAverageSpeed=.8*a.movingAverageSpeed+.2*l;const h=(r-o)/(a.movingAverageSpeed||1);let g;g=a.movingAverageSpeed>=1073741824?`${(a.movingAverageSpeed/1073741824).toFixed(2)} GB/s`:a.movingAverageSpeed>=1048576?`${(a.movingAverageSpeed/1048576).toFixed(2)} MB/s`:a.movingAverageSpeed>=1024?`${(a.movingAverageSpeed/1024).toFixed(2)} KB/s`:`${a.movingAverageSpeed.toFixed(2)} B/s`,a.progress=i,a.progressText=i.toFixed(2)+"%",a.remainingTime=Math.ceil(h),a.timeDiff=Math.ceil((e-a.startTime)/1e3),a.lastLoaded=o,a.lastTime=e,a.uploadSpeed=g,console.log({file:s.name,progress:a.progressText,fileSize:a.fileSize,movingAverageSpeed:g,remainingTime:`${a.remainingTime} 秒`,timeDiff:`${a.timeDiff} 秒`}),this.trigger("progress",this.fileProgress)}}async login(){const e=await fetch(`${this.baseUrl}/api/auth/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({Username:this.username,Password:this.password})}),s=await e.json();if(t.debugLog(this.debug,"登录响应:",s),200!==s.code)throw new Error("登录出错: "+s.message);const o=s.data.token;return await this.getDirectoryInfo(o),o}async getDirectoryInfo(e){const s=await fetch(`${this.baseUrl}/api/fs/list`,{method:"POST",headers:{Authorization:e,"Content-Type":"application/json"},body:JSON.stringify({path:this.uploadRootFolder})}),o=await s.json();if(t.debugLog(this.debug,"获取根目录列表:",o),200!==o.code)throw new Error("获取目录信息出错: "+o.message)}async createFolder(e){let s=this.uploadRootFolder;if(this.createTimestampFolder){const o=(new Date).toISOString().replace(/[-:.TZ]/g,"").substring(0,14);s=`${this.uploadRootFolder}/${o}`;const r=await fetch(`${this.baseUrl}/api/fs/mkdir`,{method:"POST",headers:{Authorization:e,"Content-Type":"application/json"},body:JSON.stringify({path:s})}),i=await r.json();if(t.debugLog(this.debug,"温馨提示: 由于createTimestampFolder开启, 上传前自动创建文件夹:",o),200!==i.code)throw new Error("本次上传自动创建文件夹出错: "+i.message)}else t.debugLog(this.debug,"提示: createTimestampFolder未开启, 将直接上传到根目录:",s);return s}async uploadFile(e,t,s){if("form"===this.uploadMethod)return this.formUploadFile(e,t,s);if("stream"===this.uploadMethod)return this.streamUploadFile(e,t,s);throw new Error("未知的上传方式: "+this.uploadMethod)}async uploadFiles(e){if(this.isUploading)return console.warn("上传正在进行中，请稍后再试。"),Promise.resolve();this.isUploading=!0;try{if(0===e.length)return;const s=await this.login(),o=await this.createFolder(s);let r=!0;const i=Array.from(e).map((e=>new Promise((async t=>{for(;this.activeUploads>=this.concurrency;)await new Promise((e=>setTimeout(e,100)));this.activeUploads++;try{const i=await this.uploadFile(s,o,e);r=r&&i.success,t(i)}catch(i){this.trigger("error",i),t({success:!1,file:e.name})}finally{this.activeUploads--}}))));return await Promise.all(i),r?t.debugLog(this.debug,"所有文件上传成功。"):t.debugLog(this.debug,"部分文件上传失败。"),this.trigger("complete",r),o}finally{this.isUploading=!1}}encodePath(e){return e.split("/").map(encodeURIComponent).join("/")}async formUploadFile(e,s,o){return new Promise(((r,i)=>{const n=new XMLHttpRequest;this.currentXhr=n;const a=new FormData;a.append("file",o),n.open("PUT",`${this.baseUrl}/api/fs/form`,!0),n.setRequestHeader("Authorization",e);const d=this.encodePath(`${s}/${o.name}`);n.setRequestHeader("File-Path",d),n.setRequestHeader("As-Task","true"),n.upload.onprogress=e=>this.uploadProgressListener(this.debug,e,o),n.onload=()=>{200===n.status?(t.debugLog(this.debug,`√上传成功: "${encodeURIComponent(o.name)}", 查看${this.baseUrl}/${s}/${encodeURIComponent(o.name)}`),r({success:!0,file:o.name})):(this.trigger("error",new Error(`上传出错: ${n.statusText}`)),r({success:!1,file:o.name}))},n.onerror=()=>this.trigger("error",new Error("网络错误或服务器无响应")),n.send(a)}))}async streamUploadFile(e,s,o){const r=`${this.baseUrl}/api/fs/put`;return new Promise(((i,n)=>{const a=new XMLHttpRequest,d=this.encodePath(`${s}/${o.name}`);this.currentXhr=a,a.open("PUT",r),a.setRequestHeader("Authorization",e),a.setRequestHeader("File-Path",d),a.setRequestHeader("Content-Type","application/octet-stream"),a.upload.onprogress=e=>this.uploadProgressListener(this.debug,e,o),a.onload=()=>{200===a.status?(t.debugLog(this.debug,`√上传成功, 上传至: "${this.baseUrl}/${d}"`),i({success:!0,file:o.name})):(this.trigger("error",new Error(`上传出错: ${a.statusText}`)),i({success:!1,file:o.name}))},a.onerror=()=>this.trigger("error",new Error("网络错误或服务器无响应")),a.ontimeout=()=>n(new Error("请求超时"));const l=new FileReader;l.onload=e=>{const t=e.target.result;a.send(new Blob([t]))},l.onerror=()=>this.trigger("error",new Error("读取文件出错")),l.readAsArrayBuffer(o)}))}}e.AlistUploader=t}(window)}));
